@model Dashboard_PerformDrillDown_MVC.Models.RegisterModel

<div class="accountHeader">
    <h2>
        Create a New Account</h2>
    <p>Use the form below to create a new account.</p>
        <p>Passwords are required to be a minimum of @Membership.MinRequiredPasswordLength characters in length.</p>
    </div>

@using (Html.BeginForm()) {
    
    @Html.DevExpress().Label(settings => {
        settings.Name = "UserNameLabel";
        settings.Text = "User Name";
        settings.AssociatedControlName = "UserName";
    }).GetHtml()
    <div class="form-field">
        @Html.EditorFor(m => m.UserName)
        @Html.ValidationMessageFor(m => m.UserName)
    </div>
    @Html.DevExpress().Label(settings => {
        settings.Name = "EmailLabel";
        settings.Text = "Email";
        settings.AssociatedControlName = "Email";
    }).GetHtml()
    <div class="form-field">
        @Html.EditorFor(m => m.Email)
        @Html.ValidationMessageFor(m => m.Email)
    </div>
    @Html.DevExpress().Label(settings => {
        settings.Name = "PasswordLabel";
        settings.Text = "Password";
        settings.AssociatedControlName = "Password";
    }).GetHtml()
    <div class="form-field">
        @Html.EditorFor(m => m.Password)
        @Html.ValidationMessageFor(m => m.Password)
    </div>
    @Html.DevExpress().Label(settings => {
        settings.Name = "ConfirmPasswordLabel";
        settings.Text = "Confirm Password";
        settings.AssociatedControlName = "ConfirmPassword";
    }).GetHtml()
    <div class="form-field">
        @Html.EditorFor(m => m.ConfirmPassword)
        @Html.ValidationMessageFor(m => m.ConfirmPassword)
    </div>
     @Html.DevExpress().Button(settings => {
        settings.Name = "Button";
        settings.Text = "Register";
        settings.UseSubmitBehavior = true;
     }).GetHtml()
}